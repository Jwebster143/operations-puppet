#!/usr/bin/python3
import argparse
import logging
import os
import sys
import yaml


log = logging.getLogger()


class Pontoon(object):
    def __init__(self, config):
        self.config = yaml.safe_load(config)

    # given a role -> hosts configuration, return a host -> role map
    def host_map(self):
        res = {}
        for role, hosts in self.config.items():
            for h in hosts:
                if h in res:
                    log.warn('duplicate host %s', h)
                    continue
                res[h] = role
        return res

    def role_variables(self):
        res = {}
        for role, hosts in self.config.items():
            res['__hosts_for_role_%s' % role.replace(':', '_')] = hosts
            # XXX kludge, used e.g. for puppetdb but not site-aware
            res['__master_for_role_%s' % role.replace(':', '_')] = hosts[0]
        return res

    def hosts_for_role(self, role):
        if role not in self.config:
            raise ValueError("role %s not found" % role)
        return self.config[role]

    def role_for_host(self, hostname):
        host_map = self.host_map()
        return host_map.get(hostname, None)


if __name__ == '__main__':
    hostname = sys.argv[1]
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser(description='Pontoon ENC')
    parser.add_argument("hostname", type=str, default=None, nargs="?",
                        help="The hostname to return data for")
    parser.add_argument("--config", type=str, metavar="PATH", default=os.environ.get('PONTOON_CONFIG', '/etc/pontoon-enc.yaml'),
                        help="Config file, default PONTOON_CONFIG / /etc/pontoon-enc.yaml")
    parser.add_argument("--hiera-output", type=str, default=None, metavar="PATH",
                        help="Destination PATH for autogenerated hiera configuration")
    parser.add_argument("--hosts-for-role", type=str, default=None, metavar="ROLE",
                        help="Print hosts running ROLE")
    args = parser.parse_args()

    with open(args.config, encoding='utf-8') as f:
        p = Pontoon(f)

    if args.hosts_for_role:
        print('\n'.join(p.hosts_for_role(args.hosts_for_role)))
        sys.exit(0)

    # XXX hack and inefficient, also the output file needs be writable by 'puppet' user
    if args.hiera_output:
        with open(args.hiera_output, "w") as f:
            yaml.dump(p.role_variables(), f)

    role = p.role_for_host(args.hostname)
    if not role:
        log.error('host %s not found in %s', args.hostname, args.config)
        sys.exit(-1)

    variables = {}
    variables.update({
        'puppetmaster': p.hosts_for_role('puppetmaster::pontoon')[0],
        'labs_puppet_master': p.hosts_for_role('puppetmaster::pontoon')[0],
        'labspuppetmaster': p.hosts_for_role('puppetmaster::pontoon')[0],
        # Set variables for role() emulation
        '_role': role.replace('::', '/'),
        '_roles': { role: 'true' },
        })

    yaml.safe_dump({
        'classes': ['role::%s' % role],
        'parameters': variables,
    }, sys.stdout)
